<Application x:Class="ShapeUp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ShapeUp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- MENU BUTTONS GRADIENT -->
        <LinearGradientBrush x:Key="GrayBlueGradientBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="DarkGray" Offset="0" />
            <GradientStop Color="#CCCCFF" Offset="0.3" />
            <GradientStop Color="#CCCCFF" Offset="0.7" />
            <GradientStop Color="DarkGray" Offset="1" />
        </LinearGradientBrush>

        <!-- LOGIN BUTTON GRADIENT -->
        <LinearGradientBrush x:Key="RedWhiteGradientBrush" StartPoint="0,0.5" EndPoint="1,0.5">
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="Red" Offset="0.1" />
            <GradientStop Color="Red" Offset="0.9" />
            <GradientStop Color="White" Offset="1" />
        </LinearGradientBrush>

        <!-- BACKGROUND GRADIENT -->
        <LinearGradientBrush x:Key="BackgroundBrush" StartPoint="0,0.5" EndPoint="1,0.5">
            <GradientStop Color="#BBEEEE" Offset="0" />
            <GradientStop Color="#E0EEEE" Offset="0.2" />
            <GradientStop Color="#F0EEEE" Offset="0.5" />
            <GradientStop Color="#E0EEEE" Offset="0.8" />
            <GradientStop Color="#BBEEEE" Offset="1" />
        </LinearGradientBrush>

        <!-- GLASS GRADIENT -->
        <GradientStopCollection x:Key="MyGlassGradientStopsResource">
            <GradientStop Color="WhiteSmoke" Offset="0.2" />
            <GradientStop Color="Transparent" Offset="0.4" />
            <GradientStop Color="WhiteSmoke" Offset="0.5" />
            <GradientStop Color="Transparent" Offset="0.75" />
            <GradientStop Color="WhiteSmoke" Offset="0.9" />
            <GradientStop Color="Transparent" Offset="1" />
        </GradientStopCollection>

        <LinearGradientBrush x:Key="MyGlassBrushResource" StartPoint="0,0" EndPoint="1,1" Opacity="0.75" GradientStops="{StaticResource MyGlassGradientStopsResource}" />

        <!-- PAGE BACKGROUND -->
        <Style TargetType="Page"
               x:Key="Page_Style">
            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        </Style>
        <!-- MINIMIZE ICON -->
        <Style TargetType="Button"
               x:Key="Minimize">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Width" Value="20" />
            <Setter Property="Height" Value="20" />
            <Setter Property="Margin" Value="0, 0, 0, 0" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="#FFEEEE" 
                                       RadiusX="1" RadiusY="1" Fill="#D3EEEE" />    
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Bottom" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="18" TextBlock.FontWeight="Bold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="outerRectangle" Value="#E5EEEE" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- SELECTED MENU BUTTON -->
        <Style TargetType="Button"
               x:Key="Selected_Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="200" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="25" TextBlock.FontWeight="UltraBold"/>
                            </DockPanel>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGGED MEDIUM SELECTED MENU BUTTON -->
        <Style TargetType="Button"
               x:Key="Logged_Medium_Selected_Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="180" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />

                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="23" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGGED SMALL SELECTED MENU BUTTON -->
        <Style TargetType="Button"
               x:Key="Logged_Small_Selected_Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="155" />
            <Setter Property="Margin" Value="5" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />

                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="20" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- MENU BUTTONS  -->
        <Style TargetType="Button"
               x:Key="Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="160" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>

                                <!-- These transforms have no effect as they are declared here.
                                The reason the transforms are included is to be targets
                                for animation (see later). -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>

                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="25" TextBlock.FontWeight="UltraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle" Value="DarkBlue" />

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGGED MEDIUM MENU BUTTONS  -->
        <Style TargetType="Button"
               x:Key="Logged_Medium_Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="160" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>

                                <!-- These transforms have no effect as they are declared here.
                                The reason the transforms are included is to be targets
                                for animation (see later). -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>

                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="23" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle" Value="DarkBlue" />

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGGED SMALL MENU BUTTONS  -->
        <Style TargetType="Button"
               x:Key="Logged_Small_Menu_Buttons">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="140" />
            <Setter Property="Margin" Value="5" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>

                                <!-- These transforms have no effect as they are declared here.
                                The reason the transforms are included is to be targets
                                for animation (see later). -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>

                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="20" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle" Value="DarkBlue" />

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- EXIT BUTTON -->
        <Style TargetType="Button"
               x:Key="Exit_Button">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="160" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="25" TextBlock.FontWeight="UltraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle" Value="#FF3333" />

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGGED SMALL EXIT BUTTON -->
        <Style TargetType="Button"
               x:Key="Logged_Small_Exit_Button">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="130" />
            <Setter Property="Margin" Value="5" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}" 
                                       RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       StrokeThickness="20" Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="White" TextBlock.FontSize="20" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle" Value="#FF3333" />

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- LOGIN BUTTON -->
        <Style TargetType="Button"
               x:Key="Login_Button">
            <Setter Property="Background" Value="{StaticResource RedWhiteGradientBrush}" />
            <Setter Property="Width" Value="75" />
            <Setter Property="Height" Value="35" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="Transparent"
                                       Fill="{TemplateBinding Background}" RadiusX="2" RadiusY="2"   />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="0" RadiusX="10" RadiusY="10" Opacity="0"
                                       Fill="{StaticResource MyGlassBrushResource}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}"
                                                  TextBlock.Foreground="Black" TextBlock.FontSize="20" TextBlock.FontWeight="ExtraBold"/>
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Sets the glass opacity to 1, therefore, the glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="TextBlock.Foreground" Value="Blue" TargetName="myContentPresenter" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- PASSWORD RECOVER BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Recover_Button">
            <Setter Property="Width" Value="100" />
        </Style>
        <!-- REGISTRATION BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Registration_Button">
            <Setter Property="Width" Value="100" />
            <Setter Property="Margin" Value="0,0,100,0" />
        </Style>
        <!-- CANCEL REGISTRATION BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Cancel_Registration_Button">
            <Setter Property="Width" Value="100" />
            <Setter Property="Margin" Value="100,0,0,0" />
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <!-- EDIT PASSWORD BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Edit_Password_Button">
            <Setter Property="Width" Value="150" />
        </Style>
        <!-- ADD EXERCISE OR RECEIPT TO MY SHAPEUP BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Add_MyShapeUp_Button">
            <Setter Property="Width" Value="230" />
        </Style>
        <!-- MAKE SUGGESTION BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Make_Suggestion_Button">
            <Setter Property="Width" Value="200" />
        </Style>
        <!-- EXERCICES GRID BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Exercises_Grid_Button">
            <Setter Property="Width" Value="90" />
        </Style>
        <!-- FOOD GRID BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Food_Grid_Button">
            <Setter Property="Width" Value="60"/>
        </Style>
        <!-- ADD EXERCISE BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Add_Exercise_Button">
            <Setter Property="Width" Value="150"/>
        </Style>
        <!-- ADD RECEIPT BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Add_Receipt_Button">
            <Setter Property="Width" Value="150"/>
        </Style>
        <!-- DELETE EXERCISE OR RECEIPT BUTTON -->
        <Style BasedOn="{StaticResource Login_Button}"
               TargetType="Button"
               x:Key="Delete_Exercise_Receipt_Button">
        </Style>
        <!-- LOGIN LABEL -->
        <Style TargetType="Label"
               x:Key="Login_Label">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="50" />
            <Setter Property="TextBlock.FontWeight" Value="Heavy" />
            <Setter Property="TextBlock.Foreground" Value="#0099CC" />
        </Style>
        <!-- FORGOT PASSWORD LABEL -->
        <Style TargetType="Label"
               x:Key="Forgot_Password_Label">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.FontWeight" Value="Heavy" />
            <Setter Property="TextBlock.Foreground" Value="#000000" />
        </Style>
        <!-- NEW USER LABEL -->
        <Style BasedOn ="{StaticResource Forgot_Password_Label}" TargetType="Label"
               x:Key="New_User_Label">
        </Style>
        <!-- BAD REGISTER LABEL -->
        <Style TargetType="Label"
               x:Key="Bad_Register_Label">
            <Setter Property="VerticalAlignment" Value="Bottom" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="18" />
            <Setter Property="TextBlock.Foreground" Value="Red" />
        </Style>
        <!--ACCOUNT TEXT ITEM LABEL-->
        <Style TargetType="Label"
               x:Key="Account_Text_Item_Label">
            <Setter Property="Width" Value="120px" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.FontWeight" Value="Heavy" />
            <Setter Property="TextBlock.Foreground" Value="#000000" />
        </Style>
        <!--ACCOUNT DATA ITEM LABEL-->
        <Style BasedOn="{StaticResource Account_Text_Item_Label}"
               TargetType="Label"
               x:Key="Account_Data_Item_Label">
            <Setter Property="Width" Value="300px" />
        </Style>
        <!-- EMPTY DATAGRID LABEL-->
        <Style TargetType="Label"
               x:Key="Empty_Datagrid_Style">
            <Setter Property="Width" Value="350px" />
            <Setter Property="Visibility" Value="Hidden" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="18" />
            <Setter Property="TextBlock.Foreground" Value="Red" />
        </Style>
        
        <!-- ADDING ITEM TO MYSHAPEUP CONFIRMATION LABEL-->
        <Style TargetType="Label"
               x:Key="Adding_Item_To_MyShapeUp_Confirmation_Style">
            <Setter Property="Margin" Value="2,0,2,0" />
            <Setter Property="Visibility" Value="Hidden" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="18" />
            <Setter Property="TextBlock.Foreground" Value="Green" />
        </Style>
        <!-- ADDING ITEM TO MYSHAPEUP ERROR LABEL-->
        <Style TargetType="Label"
               x:Key="Adding_Item_To_MyShapeUp_Error_Style">
            <Setter Property="Margin" Value="2,0,2,0" />
            <Setter Property="Visibility" Value="Hidden" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="18" />
            <Setter Property="TextBlock.Foreground" Value="Red" />
        </Style>
        <!-- ABOUT ITEM LABEL-->
        <Style TargetType="Label"
               x:Key="About_Item_Label_Style">
            <Setter Property="Margin" Value="2,0,2,0" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="18" />
            <Setter Property="TextBlock.Foreground" Value="Black" />
            <Setter Property="TextBlock.FontWeight" Value="ExtraBold" />
        </Style>
        <!-- ABOUT ITEM LABEL-->
        <Style TargetType="Label"
               x:Key="Dev_Name_Label_Style">
            <Setter Property="Margin" Value="2,0,2,0" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="26" />
            <Setter Property="TextBlock.Foreground" Value="Black" />
            <Setter Property="TextBlock.FontWeight" Value="ExtraBold" />
        </Style>
        <!-- ADD ITEM LABEL-->
        <Style TargetType="Label"
               x:Key="Add_Item_Label_Style">
            <Setter Property="Margin" Value="2,0,2,0" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.Foreground" Value="Black" />
            <Setter Property="TextBlock.FontWeight" Value="ExtraBold" />
        </Style>
        <!-- USERNAME TEXTBOX-->
        <Style TargetType="TextBox"
               x:Key="Username_TextBox">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="Width" Value="200" />
        </Style>
        <!-- ADD ITEM TEXTBOX-->
        <Style TargetType="TextBox"
               x:Key="Add_Item_Textbox_Style">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="Width" Value="200" />
            <Setter Property="Margin" Value="5,0,0,0" />
        </Style>
        <!-- ADD ITEM COMBOBOX-->
        <Style TargetType="ComboBox"
               x:Key="Add_Item_Combobox_Style">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="Width" Value="200" />
            <Setter Property="Margin" Value="5,0,0,0" />
        </Style>
        <!-- PASSWORDBOX-->
        <Style TargetType="PasswordBox"
               x:Key="PasswordBox">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="Width" Value="200" />
        </Style>
        <!-- ACCOUNT PASSWORDBOX-->
        <Style BasedOn="{StaticResource PasswordBox}" TargetType="PasswordBox"
               x:Key="Account_PasswordBox">
        </Style>
        <!-- DATE PICKER -->
        <Style TargetType="DatePicker"
               x:Key="Birthdate_DatePicker">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="TextBlock.Foreground" Value="Black" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="Width" Value="200" />
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <!-- EXERCISE, FOOD AND MY SHAPEUP DATAGRID -->
        <Style TargetType="DataGrid"
               x:Key="Datagrid_Style">
            <Setter Property="ColumnWidth" Value="200" />
            <Setter Property="GridLinesVisibility" Value="Vertical" />
            <Setter Property="AlternatingRowBackground" Value="Transparent"/>
            <Setter Property="RowBackground" Value="LightBlue" />
            <Setter Property="Width" Value="800" />
            <Setter Property="Margin" Value="0, 0, 40, 10" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="HeadersVisibility" Value="Column" />
            <Setter Property="AutoGenerateColumns" Value="True" />
            <Setter Property="IsReadOnly" Value="True" />
            <Setter Property="SelectionUnit" Value="FullRow" />
        </Style>
        <!-- EXERCISE, FOOD AND MY SHAPEUP DATAGRID COLUMN HEADER -->
        <Style TargetType="DataGridColumnHeader"
               x:Key="Datagrid_ColumnHeader_Style">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Center" />
        </Style>
        <!-- EXERCISE, FOOD AND MY SHAPEUP DATAGRID ROW -->
        <Style TargetType="{x:Type DataGridRow}"
               x:Key="Datagrid_Row_Style">
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="BorderThickness" Value="0" />
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightGreen" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ActiveBorderColorKey}" Color="LightGreen" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            </Style.Resources>
        </Style>
        <!-- EXERCISE, FOOD AND MY SHAPEUP DATAGRID CELL -->
        <Style TargetType="{x:Type DataGridCell}"
               x:Key="Datagrid_Cell_Style">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        </Style>

    </Application.Resources>
</Application>
